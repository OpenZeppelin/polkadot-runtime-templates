//! OZ-System Wrapper

use frame_support::{
    pallet_prelude::Weight,
    parameter_types,
    traits::{ConstU32, ConstU64, EnsureOrigin, Get},
    weights::constants::RocksDbWeight,
    Parameter,
};
use frame_support_procedural::{inject_runtime_type, register_default_impl};
use frame_system::limits::{BlockLength, BlockWeights};
use pallet_balances::AccountData;
use parity_scale_codec::MaxEncodedLen;
use polkadot_runtime_common::BlockHashCount;
use scale_info::prelude::fmt::Debug;
use sp_runtime::{
    traits::{AccountIdLookup, BlakeTwo256, MaybeDisplay, MaybeSerializeDeserialize, Member},
    Perbill,
};

use crate::{
    constants::{currency::*, *},
    types::*,
};

/// Configuration exposed to the user
// TODO: rename all pallet specific types to be prefixed by pallet name
#[rustfmt::skip]
pub trait OzSystemConfig {
    // Exposed to the User:
    type AccountId: Parameter
        + Member
        + MaybeSerializeDeserialize
        + Debug
        + MaybeDisplay
        + Ord
        + MaxEncodedLen;
    type SS58Prefix: Get<u16>;
    type Version: Get<sp_version::RuntimeVersion>;
    // Origins may be provided as sensible defaults.
    // Origins measure decentralization, depending on sudo pallet existence
    type ScheduleOrigin: EnsureOrigin<Self::RuntimeOrigin>;
    type PreimageManagerOrigin: EnsureOrigin<Self::RuntimeOrigin>;

    // All assignments below will be provided as sensible defaults
    // NOT exposed to the User:

    // Common Types generated by construct_runtime!
    type RuntimeOrigin;

    // Pallet Proxy
    // - Required because pallet_proxy::DefaultConfig DNE && pallet_proxy::Config: frame_system::Config
    // - Could split into separate trait && require for this trait
	type MaxProxies: Get<u32>;
	type MaxPending: Get<u32>;
    type ProxyDepositBase: Get<Balance>;
    type ProxyDepositFactor: Get<Balance>;
	type AnnouncementDepositBase: Get<Balance>;
	type AnnouncementDepositFactor: Get<Balance>;

    // Pallet Scheduler
    // - same justification as Pallet Proxy
    type MaxScheduledPerBlock: Get<u32>;
    type MaximumWeight: Get<Weight>;

    // Pallet Preimage
    type PreimageConsideration;

    // Cumulus Pallet Parachain System
    type CheckAssociatedRelayNumber;
    type ConsensusHook;
    type DmpQueue;
    type OnSystemEvent;
    type OutboundXcmpMessageSource;
    type ReservedDmpWeight;
    type ReservedXcmpWeight;
    type SelfParaId;
    type XcmpMessageHandler;

    // Remove and hardcode:
    type BlockWeight: Get<Weight>;
    type BlockLength: Get<u32>;
}

pub struct OzSystem<Runtime>(core::marker::PhantomData<Runtime>);

pub struct RuntimeBlockWeights<Runtime: OzSystemConfig>(core::marker::PhantomData<Runtime>);
impl<Runtime: OzSystemConfig> Get<BlockWeights> for RuntimeBlockWeights<Runtime> {
    fn get() -> BlockWeights {
        BlockWeights::with_sensible_defaults(Runtime::BlockWeight::get(), Perbill::one())
    }
}

pub struct RuntimeBlockLength<Runtime: OzSystemConfig>(core::marker::PhantomData<Runtime>);
impl<Runtime: OzSystemConfig> Get<BlockLength> for RuntimeBlockLength<Runtime> {
    fn get() -> BlockLength {
        BlockLength::max(Runtime::BlockLength::get())
    }
}

#[rustfmt::skip]
#[register_default_impl(OzSystem)]
impl<Runtime: OzSystemConfig> frame_system::DefaultConfig for OzSystem<Runtime> {
    // Used in Runtime:
    type AccountId = <Runtime as OzSystemConfig>::AccountId;
    type SS58Prefix = <Runtime as OzSystemConfig>::SS58Prefix;
    type Version = <Runtime as OzSystemConfig>::Version;
    type AccountData = AccountData<Balance>;
    type BlockHashCount = BlockHashCount;
    type BlockLength = RuntimeBlockLength<Runtime>;
    type BlockWeights = RuntimeBlockWeights<Runtime>;
    type DbWeight = RocksDbWeight;
    type Hash = Hash;
    type Hashing = BlakeTwo256;
    type Lookup = AccountIdLookup<Self::AccountId, ()>;
    type Nonce = Nonce;
    type MaxConsumers = ConstU32<16>;

    // Injected by Runtime:
    type OnSetCode = ();
    type BaseCallFilter = ();
    #[inject_runtime_type]
    type PalletInfo = ();
    #[inject_runtime_type]
    type RuntimeCall = ();
    #[inject_runtime_type]
    type RuntimeEvent = ();
    #[inject_runtime_type]
    type RuntimeOrigin = ();
    #[inject_runtime_type]
    type RuntimeTask = ();
    
    // Not assigned
    type PostInherents = ();
    type PostTransactions = ();
    type PreInherents = ();
    type SingleBlockMigrations = ();
    type SystemWeightInfo = ();
    type MultiBlockMigrator = ();
    type OnKilledAccount = ();
    type OnNewAccount = ();
}

#[rustfmt::skip]
impl<Runtime: OzSystemConfig> pallet_timestamp::DefaultConfig for OzSystem<Runtime> {
    // Used in Runtime
    #[cfg(feature = "experimental")]
    type MinimumPeriod = ConstU64<0>;
    #[cfg(not(feature = "experimental"))]
    type MinimumPeriod = ConstU64<{ SLOT_DURATION / 2 }>;
    type Moment = Moment;

    // Not assigned
    type OnTimestampSet = ();
    type WeightInfo = ();
}

parameter_types! {
    pub const ExistentialDeposit: Balance = EXISTENTIAL_DEPOSIT;
    pub const MaxFreezes: u32 = 0;
    pub const MaxLocks: u32 = 50;
    pub const MaxReserves: u32 = 50;
}

#[rustfmt::skip]
impl<Runtime: OzSystemConfig> pallet_balances::DefaultConfig for OzSystem<Runtime> {
    // Used in Runtime
    type Balance = Balance;
    type ExistentialDeposit = ExistentialDeposit;
    type MaxFreezes = MaxFreezes;
    type MaxLocks = MaxLocks;
    type MaxReserves = MaxReserves;
    type ReserveIdentifier = [u8; 8];
    type FreezeIdentifier = ();
    type DustRemoval = ();

    // Injected by Runtime:
    #[inject_runtime_type]
    type RuntimeEvent = ();
    #[inject_runtime_type]
    type RuntimeHoldReason = ();
    #[inject_runtime_type]
    type RuntimeFreezeReason = ();

    // Not assigned
    type WeightInfo = ();
}
